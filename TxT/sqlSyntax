RDBMS relational database mangement system
objects = tables
table=fields(columns)
record=each individual entry in table(rows)
* sql keywords are not caseSensitive
---------------------------------------------------------------------
Some of The Most Important SQL Commands

    SELECT - extracts data from a database
    UPDATE - updates data in a database
    DELETE - deletes data from a database
    INSERT INTO - inserts new data into a database
    CREATE DATABASE - creates a new database
    ALTER DATABASE - modifies a database
    CREATE TABLE - creates a new table
    ALTER TABLE - modifies a table
    DROP TABLE - deletes a table
    CREATE INDEX - creates an index (search key)
    DROP INDEX - deletes an index

* the data is returned from database is stored in result  table is called result-set
SELECT column1(first field), column2(second field), ...
FROM table_name;
-->	SELECT DISTINCT statement give only distinct values	
-->	COUNT it count our rows in our columns

-->	WHERE clause is for filter records or extract records only those who fulfill a specifed condition 

	SELECT column1, column2, ...
FROM table_name
WHERE condition; 

eg. SELECT * FROM Customers
WHERE Country='Mexico';

SQL requires single quotes around text values (most database systems will also allow double quotes).
However, numeric fields should not be enclosed in quotes:

Operator 	Description
= 	Equal
<> 	Not equal. Note: In some versions of SQL this operator may be written as !=
> 	Greater than
< 	Less than
>= 	Greater than or equal
<= 	Less than or equal
BETWEEN 	Between an inclusive range
LIKE 	Search for a pattern
IN 	To specify multiple possible values for a column
AND 	The AND operator displays a record if all the conditions separated by AND is TRUE.
OR 		The OR operator displays a record if any of the conditions separated by OR is TRUE.
NOT		The NOT operator displays a record if the condition(s) is NOT TRUE.

WHERE condition1 AND condition2 AND condition3 ...; 
WHERE condition1 OR condition2 OR condition3 ...; 
WHERE NOT condition; 
WHERE Country='Germany' AND (City='Berlin' OR City='MÃ¼nchen'); 
WHERE NOT Country='Germany' AND NOT Country='USA';

-->	ORDER BY is used to sort the record by ascending( by default ) and descending with DESC 	
	keyword
eg. ORDER BY column1, column2, ... ASC|DESC; 
	ORDER BY Country, CustomerName; 
	ORDER BY Country ASC, CustomerName DESC; 
	
-->	INSERT INTO statement is for inserting new records in table
	eg. INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...); 
INSERT INTO table_name
VALUES (value1, value2, value3, ...); 	

*	when we not insert any value in any row it will take null = no value
What is a NULL Value?

A field with a NULL value is a field with no value.

If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.

Note: It is very important to understand that a NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

--> IS NULL or IS NOT NULL test null values present or not
eg. WHERE column_name IS NULL; 
eg. WHERE column_name IS NOT NULL;

--> UPDATE statement is used to modify the existing records in a table
	UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition; 
eg. UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

--> 	DELETE statement  is used to delete existing records in a table.
 	DELETE FROM table_name
WHERE condition;
eg. DELETE FROM Customers
WHERE CustomerName='Alfreds Futterkiste';

Delete All Records

It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:
DELETE FROM table_name;

or:
DELETE * FROM table_name; 

--> 	SELECT TOP clause is used to specify the number of records to return.
Note: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses ROWNUM.
...........................................................................
  SQL Server / MS Access Syntax:
SELECT TOP number|percent column_name(s)
FROM table_name
WHERE condition; 
eg. SELECT TOP 3 * FROM Customers;
SELECT TOP 50 PERCENT * FROM Customers;
...........................................................................
  MySQL Syntax:
SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;
eg. SELECT * FROM Customers
LIMIT 3;  
...........................................................................
  Oracle Syntax:
SELECT column_name(s)
FROM table_name
WHERE ROWNUM <= number; 
eg. SELECT * FROM Customers
WHERE ROWNUM <= 3;


(((((((((((((((((((((((((((((((((FUNCTIONS)))))))))))))))))))))))))))))))))))))))))))))))))))))


--> MAX() and MIN()
The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.
SELECT MIN(column_name)
FROM table_name
WHERE condition; 

SELECT MIN(column_name)
FROM table_name
WHERE condition; 
eg. SELECT MAX(Price) AS LargestPrice
FROM Products; 	

--> 	COUNT(), AVG() and SUM()
The COUNT() function returns the number of rows that matches a specified criteria.

The AVG() function returns the average value of a numeric column.

The SUM() function returns the total sum of a numeric column.

SELECT COUNT(column_name)
FROM table_name
WHERE condition; 
eg. SELECT COUNT(ProductID)
FROM Products;
---------
SELECT AVG(Price)
FROM Products;
----------
SELECT SUM(Quantity)
FROM OrderDetails; 
























______________-____________________________________

--> LIKE operator -The LIKE operator is used in a WHERE clause to search for a specified pattern in a column
There are two wildcards used in conjunction with the LIKE operator:

    % - The percent sign represents zero, one, or multiple characters
    _ - The underscore represents a single character

Note: MS Access uses a question mark (?) instead of the underscore (_).
SELECT column1, column2, ...
FROM table_name
WHERE column LIKE pattern; 
eg. SELECT * FROM Customers
WHERE CustomerName LIKE 'a%'; 

LIKE Operator 	Description
WHERE CustomerName LIKE 'a%' 	Finds any values that starts with "a"
WHERE CustomerName LIKE '%a' 	Finds any values that ends with "a"
WHERE CustomerName LIKE '%or%' 	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%' 	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%' 	Finds any values that starts with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o' 	Finds any values that starts with "a" and ends with "o"
The following SQL statement selects all customers with a City starting with "b", "s", or "p":
Example
SELECT * FROM Customers
WHERE City LIKE '[bsp]%';
'[a-c]%'; select "a","b",or "c";
WHERE City LIKE '[!bsp]%'; 
WHERE City NOT LIKE '[bsp]%'; 

--> In 
it allows you to specify multiple values in a WHERE clause.

The IN operator is a shorthand for multiple OR conditions.
IN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

or:
SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT); 

--> BETWEEN operator select values within a given range

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2; 
eg. SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;
------------------
SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;

------------------
SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;
-------------------
SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;


-->Alias Name 
they used to give a table, or a column in a table, a temporary name.

Aliases are often used to make column names more readable.
An alias only exists for the duration of the query.

Alias Column Syntax

SELECT column_name AS alias_name
FROM table_name;

Alias Table Syntax

SELECT column_name(s)
FROM table_name AS alias_name; 

eg. SELECT CustomerID as ID, CustomerName AS Customer
FROM Customers;	
-----------
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;
---------- 
SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID;

        
++++++++++++++++++++++++++++++++++++++++++++++++

--> UNION operator(selects only distinct values) 

The SQL UNION Operator

The UNION operator is used to combine the result-set of two or more SELECT statements.

    Each SELECT statement within UNION must have the same number of columns
    The columns must also have similar data types
    The columns in each SELECT statement must also be in the same order
		ie, number of columns->similar-> order
syntax:
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2; 

--> UNION ALL(to allow union of duplicate values);
-------------------
-->	GROUP BY
